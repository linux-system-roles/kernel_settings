---
- name: Set version specific variables
  include_vars: "{{ lookup('first_found', ffparams) }}"
  vars:
    ffparams:
      files:
        - "{{ ansible_facts['distribution'] }}_\
          {{ ansible_facts['distribution_version'] }}.yml"
        - "{{ ansible_facts['distribution'] }}_\
          {{ ansible_facts['distribution_major_version'] }}.yml"
        - "{{ ansible_facts['distribution'] }}.yml"
        - "{{ ansible_facts['os_family'] }}.yml"
        - "default.yml"
      paths:
        - "{{ role_path }}/vars"

- name: Ensure required packages are installed
  package:
    name: "{{ __kernel_settings_packages }}"
    state: present

- name: Ensure required services are enabled and started
  service:
    name: "{{ item }}"
    state: started
    enabled: yes
  loop: "{{ __kernel_settings_services }}"

- name: Ensure kernel settings profile directory exists
  file:
    path: "{{ __kernel_settings_profile_dir }}"
    state: directory
    mode: 0755

- name: Generate a configuration for kernel settings
  template:
    src: "{{ __kernel_settings_profile_src }}.j2"
    dest: "{{ __kernel_settings_profile_filename }}"
    force: no
    mode: 0644

- name: Apply kernel settings
  kernel_settings:
    cpu: "{{ kernel_settings_cpu.settings | union([{'name': 'devices', 'value': kernel_settings_cpu.devices | d('*', true)}]) if kernel_settings_cpu else omit }}"
    disk: "{{ kernel_settings_disk.settings | union([{'name': 'devices', 'value': kernel_settings_disk.devices | d('*', true)}]) if kernel_settings_disk else omit }}"
    net: "{{ kernel_settings_net.settings | union([{'name': 'devices', 'value': kernel_settings_net.devices | d('*', true)}]) if kernel_settings_net else omit }}"
    audio: "{{ kernel_settings_audio.settings | union([{'name': 'devices', 'value': kernel_settings_audio.devices | d('*', true)}]) if kernel_settings_audio else omit }}"
    scsi_host: "{{ kernel_settings_scsi_host.settings | union([{'name': 'devices', 'value': kernel_settings_scsi_host.devices | d('*', true)}]) if kernel_settings_scsi_host else omit }}"
    video: "{{ kernel_settings_video.settings | union([{'name': 'devices', 'value': kernel_settings_video.devices | d('*', true)}]) if kernel_settings_video else omit }}"
    usb: "{{ kernel_settings_usb.settings | union([{'name': 'devices', 'value': kernel_settings_usb.devices | d('*', true)}]) if kernel_settings_usb else omit }}"
    selinux: "{{ kernel_settings_selinux.settings | union([{'name': 'devices', 'value': kernel_settings_selinux.devices | d('*', true)}]) if kernel_settings_selinux else omit }}"
    vm: "{{ kernel_settings_vm.settings | union([{'name': 'devices', 'value': kernel_settings_vm.devices | d('*', true)}]) if kernel_settings_vm else omit }}"
    sysctl: "{{ kernel_settings_sysctl if kernel_settings_sysctl else omit }}"
    sysfs: "{{ kernel_settings_sysfs if kernel_settings_sysfs else omit }}"
    systemd:
      - name: "{{ 'cpu_affinity' if kernel_settings_systemd_cpu_affinity
                  else none }}"
        value: "{{ kernel_settings_systemd_cpu_affinity
                   if kernel_settings_systemd_cpu_affinity !=
                   __kernel_settings_state_absent
                   else none }}"
        state: "{{ 'absent' if kernel_settings_systemd_cpu_affinity ==
                   __kernel_settings_state_absent else none }}"
    bootloader:
      - name: "{{ 'cmdline'
                  if kernel_settings_bootloader_cmdline | d({})
                  else none }}"
        value: "{{ kernel_settings_bootloader_cmdline |
                   d([]) }}"
    purge: "{{ kernel_settings_purge }}"
  notify: __kernel_settings_handler_modified
  register: __kernel_settings_register_module
  when:
    - kernel_settings_sysctl or kernel_settings_sysfs
      or kernel_settings_systemd_cpu_affinity
      or kernel_settings_transparent_hugepages
      or kernel_settings_transparent_hugepages_defrag
      or kernel_settings_bootloader_cmdline | d({})
      or kernel_settings_purge

- name: tuned apply settings
  command: >
    tuned-adm profile '{{ __kernel_settings_register_module.active_profile }}'
  when: __kernel_settings_register_module is changed

- name: verify settings
  include_tasks: verify_settings.yml
  when: __kernel_settings_register_module is changed

- name: notify user that reboot is needed to apply changes
  debug:
    msg: >
      kernel_settings have been modified.
      A reboot is required in order to apply the changes.
  when:
    - __kernel_settings_register_module.reboot_required | d(false)
    - not kernel_settings_reboot_ok | d(false)

- name: set the flag that reboot is needed to apply changes
  set_fact:
    kernel_settings_reboot_required: true
  when:
    - __kernel_settings_register_module.reboot_required | d(false)
    - not kernel_settings_reboot_ok | d(false)
